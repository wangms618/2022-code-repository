// 我们称一个长度为n的序列为正则序列，当且仅当该序列是一个由1~n组成的排列，即该序列由n个正整数组成，取值在[1,n]范围，且不存在重复的数，同时正则序列不要求排序
// 有一天小团得到了一个长度为n的任意序列s，他需要在有限次操作内，将这个序列变成一个正则序列，每次操作他可以任选序列中的一个数字，并将该数字加一或者减一。
// 请问他最少用多少次操作可以把这个序列变成正则序列？
// 输入描述:
// 输入第一行仅包含一个正整数n，表示任意序列的长度。(1<=n<=20000)
// 输入第二行包含n个整数，表示给出的序列，每个数的绝对值都小于10000。
// 输出描述:
// 输出仅包含一个整数，表示最少的操作数量。
// 输入例子1:
// 5
// -1 2 3 10 100
// 输出例子1:
// 103

// 根据题意可知
// 给一个正整数n，序列必须变为[2,1,4,3...,n]，里面数字不可重复，必须在[1,n]的范围内
// 做法先排序，第一个变为1，第二个定为2，每次操作记录下来即可
let n = parseInt(readline())
let arr = readline().split(' ')
arr = arr.map(item => +item)
arr.sort((a,b)=>a-b)
let count = 0
for(let i = 0;i<arr.length;i++){
    if(arr[i]!== i+1){
        count += Math.abs(i+1-arr[i])
    }
}
print(count)